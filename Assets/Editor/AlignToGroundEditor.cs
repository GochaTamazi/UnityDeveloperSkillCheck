using UnityEditor;
using UnityEngine;

namespace Tools.Editor
{
    [CustomEditor(typeof(AlignToGround))]
    public class AlignToGroundEditor : UnityEditor.Editor
    {
        public override void OnInspectorGUI()
        {
            DrawDefaultInspector();

            AlignToGround aligner = (AlignToGround)target;

            if (GUILayout.Button("Align to Ground"))
            {
                AlignObjectToGround(aligner);
            }
        }

        private void AlignObjectToGround(AlignToGround aligner)
        {
            Transform objTransform = aligner.transform;
            Renderer renderer = objTransform.GetComponentInChildren<Renderer>();

            if (renderer == null)
            {
                Debug.LogWarning($"AlignToGround: {objTransform.name} has no Renderer to calculate bounds.");
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∂–Ω—é—é —Ç–æ—á–∫—É –æ–±—ä–µ–∫—Ç–∞
            Bounds bounds = renderer.bounds;
            Vector3 bottomPoint = new Vector3(bounds.center.x, bounds.min.y, bounds.center.z);

            // –ü—É—Å–∫–∞–µ–º Raycast –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–∞–º –æ–±—ä–µ–∫—Ç
            Vector3 rayOrigin = bottomPoint + Vector3.up * 0.5f;

            if (Physics.Raycast(rayOrigin, Vector3.down, out RaycastHit hit, aligner.raycastDistance))
            {
                Undo.RecordObject(objTransform, "Align to Ground");

                // –°–º–µ—â–µ–Ω–∏–µ –æ—Ç pivot –¥–æ –Ω–∏–∂–Ω–µ–π —Ç–æ—á–∫–∏
                float bottomOffset = bottomPoint.y - objTransform.position.y;

                // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–∏–∑ –º–æ–¥–µ–ª–∏ –∫–∞—Å–∞–ª—Å—è –∑–µ–º–ª–∏
                objTransform.position = new Vector3(
                    objTransform.position.x,
                    hit.point.y - bottomOffset,
                    objTransform.position.z
                );

                // üí° –ë–æ–Ω—É—Å: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–∫–ª–æ–Ω –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
                objTransform.rotation = Quaternion.FromToRotation(Vector3.up, hit.normal) * objTransform.rotation;
            }
            else
            {
                Debug.LogWarning($"AlignToGround: surface under {objTransform.name} not found.");
            }
        }
    }
}
